name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main

env:
  ECS_CLUSTER: "parking_lot_cluster"
  ECS_SERVICE: "parking_lot_service"
  CONTAINER_NAME: "parking_lot_container"
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src/ParkingLotAPI/ParkingLotAPI.csproj

      - name: Build
        run: dotnet build src/ParkingLotAPI/ParkingLotAPI.csproj --no-restore

      - name: Publish the application
        run: dotnet publish src/ParkingLotAPI/ParkingLotAPI.csproj --configuration Release --output src/ParkingLotAPI/app --no-restore

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest -f src/ParkingLotAPI/Dockerfile ./src

      - name: Push Docker image to Amazon ECR
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Update ECS service with new image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
        run: |
          aws ecs update-service \
            --region $AWS_REGION \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --desired-count 1
      
      - name: Wait for service to stabilize
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
        run: |
          aws ecs wait services-stable \
            --region $AWS_REGION \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE
